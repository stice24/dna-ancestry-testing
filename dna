;; open Assert
;; open Helices

(* The Assert library by default will run _all_ of the test cases
   associated with this program.  While debugging, you may prefer to
   have testing stop and report the first failure that is encountered;
   the command below requests this behavior.  Remove or comment out
   the line if you want to see all of the test errors at once. *)
;; stop_on_failure ()

(* -------------------------------------------------------------------------- *)
(* ----- Computing Human Evolution ------------------------------------------ *)
(* -------------------------------------------------------------------------- *)



(* -------------------------------------------------------------------------- *)
(* ----- DNA Data representation -------------------------------------------- *)
(* -------------------------------------------------------------------------- *)

(* Your program inputs will be real samples of DNA, the genetic code that
   describes how to build organisms (Figure B).

   Each double helix of DNA consists of two complementary strands,
   each one a sequence of the nucleotides adenine, thymine, guanine,
   and cytosine. Adenine always appears opposite thymine, and guanine
   always appears opposite cytosine.

   type nucleotide =
    | G (* guanine *)
    | C (* cytosine *)
    | A (* adenine *)
    | T (* thymine *)

    type helix = nucleotide list *)

(* -------------------------------------------------------------------------- *)
(* ----- Ape DNA Sequences -------------------------------------------------- *)
(* -------------------------------------------------------------------------- *)


(* Given a helix, output the ape name (e.g. "Orangutan") or "Not an
   Ape!" if the helix doesn't match any of the ape helices. *)

let ape_names : (helix * string) list =
  [ (lar_gibbon,           "Lar Gibbon")
  ; (pileated_gibbon,      "Pileated Gibbon")
  ; (siamang,              "Siamang")
  ; (white_cheeked_gibbon, "White Cheeked Gibbon")
  ; (orangutan,            "Orangutan")
  ; (gorilla,              "Gorilla")
  ; (chimpanzee,           "Chimpanzee")
  ; (human,                "Human")
  ]

let rec lookup_ape_name (ape:helix) (l:(helix * string) list) : string =
  begin match l with
    | [] -> "Not an Ape!"
    | (h,name)::hs -> if ape = h then name else lookup_ape_name ape hs
  end

let string_of_ape (ape: helix) : string =
  lookup_ape_name ape ape_names


--> Computing Complementary Helices


let rec complementary_helix (x: helix) : helix =
  begin match x with
    | [] -> []
    | n::tl -> if n = T then A::complementary_helix (tl)
      else if n = A then T::complementary_helix (tl)
      else if n = C then G::complementary_helix (tl)
      else C::complementary_helix (tl)
  end


(*;; print_endline("ANSWER:"^ complementary_helix ) *)

--> Computing Hamming Distance Between Helices

(* Given two equal-length helices, your next task is to compute the
   number of differences between the nucleotide sequences, i.e., the
   number of nucleotides that would need to be changed to transform
   one helix into the other.

   Warning: You should ASSUME that this function will always be
   applied to two lists with the same number of elements.  Do NOT test
   the lengths of the lists when implementing this function.  If you
   do so, your code may be ungradeable because it is TOO SLOW (e.g.,
   it would require a length calculation to occur at every recursive
   invocation).  It does not matter what this function returns when
   applied to different length lists. *)

let rec hamming_distance (x1: helix) (x2: helix) : int =
  begin match x1, x2 with
    | [], [] -> 0
    | n1::tl1, n2::tl2 -> if n1 = n2 then hamming_distance (tl1)(tl2)
      else 1 + hamming_distance (tl1)(tl2)
    | _, _ -> 0
  end


let mutation_string (ape: helix) : string =
  "Number of mutations between humans and " ^ (string_of_ape ape)
  ^ ": " ^ (string_of_int (hamming_distance human ape)) ^ "\n"


;; print_endline (mutation_string gorilla)
;; print_endline (mutation_string lar_gibbon)
;; print_endline (mutation_string pileated_gibbon)
;; print_endline (mutation_string siamang)
;; print_endline (mutation_string white_cheeked_gibbon)
;; print_endline (mutation_string orangutan)
;; print_endline (mutation_string chimpanzee)



let question_most_like_human () : helix list =
  [chimpanzee; gorilla; orangutan; siamang; pileated_gibbon; 
   white_cheeked_gibbon; lar_gibbon]

(* To test your answer, write a function that determines whether a
   list of helices is ordered in STRICTLY DECREASING similarity to humans.
   (This function should return true for lists that are empty or that
   contain exactly one helix.) *)

let rec decreasing_similarity (apes: helix list) : bool =
  begin match apes with
    | x::n::tl -> (hamming_distance (x) (human) < hamming_distance (n) (human))
                  && decreasing_similarity(n::tl)
    | _ -> true
  end


--> Decode a helix to get an amino acid chain

type acid =
  | Ala | Arg | Asn | Asp | Cys | Glu | Gln | Gly | His | Ile | Leu | Lys | Met
  | Phe | Pro | Ser | Thr | Trp | Tyr | Val | END

(* Given a nucleotide triplet, the function acid_of_triplet outputs a decoded
   acid or END. *)

let rec acid_of_triplet (n1: nucleotide) (n2: nucleotide) (n3: nucleotide)
  : acid =
  begin match (n1, n2, n3) with
    | (A, A, A) -> Phe | (A, A, G) -> Phe | (A, A, T) -> Leu | (A, A, C) -> Leu
    | (G, A, A) -> Leu | (G, A, G) -> Leu | (G, A, T) -> Leu | (G, A, C) -> Leu
    | (T, A, A) -> Ile | (T, A, G) -> Ile | (T, A, T) -> Ile | (T, A, C) -> Met
    | (C, A, A) -> Val | (C, A, G) -> Val | (C, A, T) -> Val | (C, A, C) -> Val
    | (A, G, A) -> Ser | (A, G, G) -> Ser | (A, G, T) -> Ser | (A, G, C) -> Ser
    | (G, G, A) -> Pro | (G, G, G) -> Pro | (G, G, T) -> Pro | (G, G, C) -> Pro
    | (T, G, A) -> Thr | (T, G, G) -> Thr | (T, G, T) -> Thr | (T, G, C) -> Thr
    | (C, G, A) -> Ala | (C, G, G) -> Ala | (C, G, T) -> Ala | (C, G, C) -> Ala
    | (A, T, A) -> Tyr | (A, T, G) -> Tyr | (A, T, T) -> END | (A, T, C) -> END
    | (G, T, A) -> His | (G, T, G) -> His | (G, T, T) -> Gln | (G, T, C) -> Gln
    | (T, T, A) -> Asn | (T, T, G) -> Asn | (T, T, T) -> Lys | (T, T, C) -> Lys
    | (C, T, A) -> Asp | (C, T, G) -> Asp | (C, T, T) -> Glu | (C, T, C) -> Glu
    | (A, C, A) -> Cys | (A, C, G) -> Cys | (A, C, T) -> END | (A, C, C) -> Trp
    | (G, C, A) -> Arg | (G, C, G) -> Arg | (G, C, T) -> Arg | (G, C, C) -> Arg
    | (T, C, A) -> Ser | (T, C, G) -> Ser | (T, C, T) -> Arg | (T, C, C) -> Arg
    | (C, C, A) -> Gly | (C, C, G) -> Gly | (C, C, T) -> Gly | (C, C, C) -> Gly
  end

(* Your next task: given a helix, decode its first acid chain. This is
   done as follows...

   1. Start decoding by scanning the helix for the first occurrence of
      the sequence [T; A; C] (which encodes the acid Met). This starts
      an acid chain with Met as its head element.

   2. After the first occurrence of [T; A; C], decode the following
      nucleotides in the helix in triplets and build a list of the
      results.

   3. Stop decoding when either (a) we run out of triplets or (b) we
      encounter one of the triplets encoding the END acid ([A; T; T],
      [A; C; T], or [A; T; C]). If we encounter the END acid, the END
      marker should NOT be included in the output acid list.

   You should disregard any nucleotides that might happen to occur
   before the first occurrence of Met (including END markers).  *)

let rec acid_helper (x: helix) : acid list =
  begin match x with
    | n::n1::n2::tl -> if acid_of_triplet (n) (n1) (n2) = END then []
      else (acid_of_triplet (n) (n1) (n2))::acid_helper tl
    | _ -> []
  end

let rec acids_of_helix (x: helix) : acid list =
  begin match x with
    | [] -> []
    | T::A::C::tl -> Met::acid_helper(tl)
    | x::x1::x2::tl -> acids_of_helix(x1::x2::tl)
    | _ -> []
  end





--> Representing phylogenetic trees

(* Now that we have a DNA datatype and some ape data, we can analyze
   this data to figure out the relationship between the various
   present-day species. That relationship is described by
   evolutionary (or phylogenetic) trees, which show how the common
   ancestors for each species relate to each other. Specifically, we
   will take four ape helices and:

   1. First, generate all possible evolutionary trees with the ape DNA
      at the leaves. Each tree represents a possible set of family
      relationships among the given species.

   2. Next, take these generated trees and fill in hypothetical
      genetic codes for the ancestor species. These hypothetical codes
      will be stored in an auxiliary data structure called a
      labeled_tree (where internal nodes also store genetic
      information).

   3. Then, estimate each labeled_tree's complexity, and guess at how
      many evolutionary events were required to create the given tree.

   4. Finally, return the simplest (i.e., most biologically plausible)
      tree, stripping off the guessed ancestors.

type tree =
  | Leaf of helix
  | Node of tree * tree

let greater_apes () : tree =
  Node (
    Leaf orangutan,
    Node (
      Leaf gorilla,
      Node (
        Leaf human,
        Leaf chimpanzee
      )
    )
  )



let rec string_of_tree (r: tree) : string =
  let spaces (n: int) : string = String.make n ' ' in
  let dashes (n: int) : string = String.make n '-' in

  let rec zip ((t1, w1): string list * int) ((t2, w2): string list * int)
    : string list * int =
    let rec aux (t1: string list) (t2: string list) : string list =
      begin match t1, t2 with
        | [], _  -> List.map (fun s -> spaces w1 ^ s) t2
        | _ , [] -> List.map (fun s -> s ^ spaces w2) t1
        | t :: ts, s :: ss -> (t ^ s) :: (aux ts ss)
      end
    in
    let h1 = w1 / 2 in
    let h2 = w2 / 2 in
    let line1 = spaces h1 ^ dashes (h1 + h2 + 2) ^ spaces h2 in
    let line2 = spaces h1 ^ "|" ^ spaces (h1 + h2) ^ "|" ^ spaces h2 in
    (line1 :: line2 :: aux t1 t2, w1 + w2 + 2)
  in

  let rec aux (t: tree) : string list * int =
    begin match t with
      | Leaf x ->
        let str1 = " " ^ string_of_ape x ^ " " in
        let str2 =
          if (String.length str1) mod 2 = 0 then str1
          else " " ^ str1
        in
        ([str2], String.length str2)
      | Node (left, right) ->
        zip (aux left) (aux right)
    end
  in
  let (strs, w) = aux r in
  let strs2 = (spaces (w/2) ^ " |" ^ (spaces (w/2))) :: strs in
  (String.concat "\n" strs2) ^ "\n"

(* These commands display the greater_apes tree in the console when
   your program runs. Before continuing, make sure that you understand
   the connection between this display, the definition of
   'greater_apes' above, and Figure A. *)

;; print_endline "Greater apes (from Figure A)"
;; print_endline "----------------------------"
;; print_endline (string_of_tree (greater_apes ()))

(* Your next job is to fill in the tree for the lesser apes, also from
   the same figure. *)

let lesser_apes () : tree =
  Node(
    Leaf white_cheeked_gibbon, 
    Node(
      Leaf siamang, 
      Node(
        Leaf lar_gibbon, 
        Leaf pileated_gibbon) ) )

(* Once you have defined this tree, uncomment the following commands and make
   sure that it matches the one in Figure A. *)

   (*
   ;; print_endline "Lesser apes (from Figure A)"
   ;; print_endline "---------------------------"
   ;; print_endline (string_of_tree (lesser_apes ()))
*)

(* One way to test that you have defined 'lesser_apes' correctly is to
   count the number of species that it contains. We can calculate this
   number by counting the number of leaf nodes in the tree.

   Implement the following function. *)

let rec count_leaves (t: tree) : int =
  begin match t with
    |Leaf (h) -> 1
    |Node(lt,rt) -> if count_leaves (lt) = 0 && count_leaves (rt) = 0 
      then 1 + count_leaves (lt) + count_leaves (rt)
      else count_leaves(lt) + count_leaves(rt)

  end



--> Generating

(* Now that we have a representation for phylogenetic trees, we can
   begin Step 1 of our DNA analysis: generating all possible trees by
   listing all distinct tree structures with the input helices at the
   leaves. Because internal nodes correspond to ancestor species, we
   will (later on) guess the internal labels before evaluating
   functions that compute tree complexity.

   The following function (whose body we provide for you) generates
   all possible trees for a set of four present-day species... *)

(* Given four helices that should appear on the leaves of each output
   tree, return a list of all distinct tree structures with the input
   helices at their leaves. *)

let rec all_trees (x1: helix) (x2: helix) (x3: helix) (x4: helix)
  : tree list =
  let tree1 (x1: helix) (x2: helix) (x3: helix) (x4: helix): tree =
    Node (Node (Leaf x1, Leaf x2),  Node (Leaf x3, Leaf x4)) in
  let tree2 (x1: helix) (x2: helix) (x3: helix) (x4: helix): tree =
    Node (Leaf x1, Node (Leaf x2, Node (Leaf x3, Leaf x4))) in
  [tree1 x1 x2 x3 x4; tree1 x1 x3 x2 x4; tree1 x1 x4 x2 x3;
   tree2 x1 x2 x3 x4; tree2 x1 x3 x2 x4; tree2 x1 x4 x2 x3;
   tree2 x2 x1 x3 x4; tree2 x2 x3 x1 x4; tree2 x2 x4 x1 x3;
   tree2 x3 x1 x2 x4; tree2 x3 x2 x1 x4; tree2 x3 x4 x1 x2;
   tree2 x4 x1 x2 x3; tree2 x4 x2 x1 x3; tree2 x4 x3 x1 x2]

let all_greater_ape_trees () : tree list =
  all_trees gorilla human chimpanzee orangutan

let all_lesser_ape_trees () : tree list =
  all_trees lar_gibbon pileated_gibbon siamang white_cheeked_gibbon

(* If you would like to see the candidate evolutionary trees for the greater
   apes, uncomment the following lines. Note that the tree we are hoping to
   pick out (from Figure A) is third from the end. *)

let rec string_of_tree_list (ts: tree list) : string =
  begin match ts with
    | []       -> ""
    | hd :: tl -> string_of_tree hd ^ "\n\n" ^ string_of_tree_list tl
  end

(*
   ;; print_endline "Possible evolutionary trees (greater apes)"
   ;; print_endline "------------------------------------------"
   ;; print_endline (string_of_tree_list (all_greater_ape_trees ()))
*)


--> Guessing Ancestors

(* Now on to step 2 of our roadmap: comparing the generated
   evolutionary trees from above, with the help of an intermediate
   data structure called a 'labeled_tree'. This data structure is
   almost like the evolutionary tree, except that internal nodes are
   labeled with guesses about the dna data of ancestor species. *)

type labeled_tree =
  | LLeaf of helix
  | LNode of labeled_tree * helix * labeled_tree

(*LLeaf to Leaf
  LNode to Node*)


let helix_of_tree (t: labeled_tree) : helix =
  begin match t with 
    | LLeaf (h) -> h
    | LNode (lt,h,rt) -> h
  end


(* Our goal is to compare labeled trees, but it is worth thinking
   first about what we will do once we find the best one. We would
   like to produce an (unlabeled) evolutionary tree, so we will need
   to strip off the guessed ancestors.

   Given a labeled_tree as defined above, we can do this by returning a tree of
   identical structure with the helix in each Node removed. Don't forget to add
   another test for unlabel_tree in dnaTest.ml. *)

let rec unlabel_tree (t: labeled_tree) : tree =
  begin match t with 
    | LLeaf (h) -> Leaf (h)
    | LNode (lt,h,rt) -> Node(unlabel_tree(lt), unlabel_tree(rt))
  end
(* -------------------------------------------------------------------------- *)



(* BEFORE WRITING add_ancestor_labels, READ CAREFULLY THROUGH THE HELPER
   FUNCTION guess_parent_helix AND FILL IN THE REQUIRED TEST CASE RESULTS. *)

(* Assuming x1 and x2 are valid helices, guess the valid helix that labels their
   parent node in an evolutionary tree. The guessed helix is computed using
   nucleotide-by-nucleotide comparison of x1 and x2: if the nucleotides match,
   the corresponding parent nucleotide is the same. If they don't match, the
   corresponding parent nucleotide is (arbitrarily) A. *)


let rec guess_parent_helix (x1: helix) (x2: helix) : helix =
  begin match x1, x2 with
    | [], []             -> []
    | h1 :: t1, h2 :: t2 ->
      (if h1 = h2 then h1 else A) :: guess_parent_helix t1 t2
    | _  -> failwith "invalid input: x1 and x2 have unequal lengths"
  end

(* -------------------------------------------------------------------------- *)

(* Now we want to use the guess_parent_helix function to fill in the
   guess the DNA of all the ancestor species in an evolutionary tree,
   given the DNA of their present-day descendants. *)

(* Given an unlabeled tree, generate a tree with the same shape but with all
   internal nodes properly labeled. Use guess_parent_helix to compute the
   appropriate label for a parent node, given the labels of its two children.

let rec add_ancestor_labels (t: tree) : labeled_tree =
  begin match t with 
    | Leaf (x) -> LLeaf(x)
    | Node (lt, rt) -> let labeled_lt = add_ancestor_labels(lt)in
      let labeled_rt = add_ancestor_labels(rt)in
      LNode(labeled_lt, 
            guess_parent_helix(helix_of_tree (labeled_lt))
              (helix_of_tree (labeled_rt)),
            labeled_rt)
  end


(* Once your test cases for add_ancestor_labels pass, this function can be used
   to label all of the trees for the greater and lesser apes.

   To label ALL of the trees in the list of candidates, we define (for
   you) the following helper function: *)

let rec add_ancestor_labels_list (ts: tree list) : labeled_tree list =
  begin match ts with
    | []       -> []
    | hd :: tl -> add_ancestor_labels hd :: add_ancestor_labels_list tl
  end

(* Labeled trees for lesser and greater apes. *)

let labeled_greater_ape_trees () : labeled_tree list =
  add_ancestor_labels_list (all_greater_ape_trees ())

let labeled_lesser_ape_trees () : labeled_tree list =
  add_ancestor_labels_list (all_lesser_ape_trees ())


--> Parent-Child Hamming Distance


let rec parent_child_hamming (t: labeled_tree) : int =
  begin match t with 
    | LLeaf (n) -> 0
    | LNode (lt, h, rt) -> (hamming_distance(helix_of_tree (lt) ) (h) ) + 
                           (hamming_distance(helix_of_tree (rt) ) (h) ) +
                           (parent_child_hamming(lt) ) +
                           (parent_child_hamming(rt) )
  end   


--> Finding the Simplest Tree

let rec simplest_tree (ts: labeled_tree list) : labeled_tree * int =
  begin match ts with
    | [] -> failwith "simplest_tree: unimplemented"
    | x::n::tl -> if parent_child_hamming(x) < parent_child_hamming(n)
      then simplest_tree(x::tl) else simplest_tree(n::tl)
    | x::tl -> (x, parent_child_hamming(x))
  end
(* -------------------------------------------------------------------------- *)

(* Finally, we are ready to put everything together to see how well calculating
   evolutionary trees using the parent-child hamming distance complexity measure
   works. *)

let simplest_greater_ape_tree () : tree =
  let (t, _) = simplest_tree (labeled_greater_ape_trees ()) in
  unlabel_tree t

(* We can compare this computed tree with the one in Figure A, to see that this
   methodology works well for greater apes. Uncomment the following printing
   commands to make sure that the result matches the following diagram:

    Computed evolutionary tree for greater apes
    -------------------------------------------
                            |
          -------------------------
          |                       |
      Orangutan      ------------------
                    |                |
                  Gorilla     ------------
                              |          |
                            Human  Chimpanzee

   Note: If this part of the program runs slowly, you'll want to recomment
   these commands*)


;; print_endline "Computed evolutionary tree for greater apes"
;; print_endline "-------------------------------------------"
;; print_endline (string_of_tree (simplest_greater_ape_tree ())) 

(* However, trying this out for lesser apes produces something close to, but not
   quite exactly, what we wanted. Uncomment the printing commands below to see
   how close we get to Figure A. The computed evolutionary tree should match the
   following diagram:

    Computed evolutionary tree for lesser apes
    ------------------------------------------
                                    |
                  -----------------------------------
                  |                                 |
        -----------------              ------------------
        |               |              |                |
   Lar Gibbon   Pileated Gibbon   Siamang  White Cheeked Gibbon *)

let simplest_lesser_ape_tree () : tree =
  let (t, _) = simplest_tree (labeled_lesser_ape_trees ()) in
  unlabel_tree t

   (*
   ;; print_endline "Computed evolutionary tree for lesser apes"
   ;; print_endline "------------------------------------------"
   ;; print_endline (string_of_tree (simplest_lesser_ape_tree ())) *)


-->Refactoring

let find_simplest_tree (x1: helix) (x2: helix) (x3: helix) (x4: helix) : tree =
  let(ltr, _) = simplest_tree (
      add_ancestor_labels_list (all_trees x1 x2 x3 x4)) 
  in unlabel_tree (ltr)

;; print_endline "dna.ml: ran to completion."
