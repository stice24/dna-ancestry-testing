;; open Assert
;; open Dna
;; open Helices

(* The assertion library by default will run _all_ of the test cases associated
 * with this program.  However, while debugging you may prefer to have the
 * testing stop on the first failure that is encountered. Comment the line
 * below to turn off first-failure. *)
;; stop_on_failure ()



 *
 * LNode (
 *     LNode (
 *         LLeaf h1,
 *         h2,
 *         LLeaf h3
 *     ),
 *     h4,
 *     LLeaf h5
 * )
 *
*)

(************************ complementary_helix tests ***************************)

(* Here's an example test case.  Be sure to fill in the incomplete test cases
 * we provided. *)

let test () : bool =
  complementary_helix [T] = [A]
;; run_test "complementary_helix singleton" test

let test () : bool =
  complementary_helix [C; T; T; C] = [G; A; A; G]
;; run_test "complementary_helix multi-element list" test

let test () : bool =
  not(complementary_helix [C; T; T; C] = [G; T; A; G])
;; run_test "complementary_helix multi-element list incorrect" test

let test () : bool =
  complementary_helix [C; T; A; A; T; G; T] = [G; A; T; T; A; C; A]
;; run_test "complementary_helix multi-element list with all nucleotides" test

let test () : bool =
  complementary_helix [] = []
;; run_test "complementary_helix empty list" test



(*************************** hamming_distance tests ***************************)

(* Here's an example test case.  Be sure to add your own--we will be grading the
 * tests for this problem. *)

let test () : bool =
  hamming_distance [G; A] [G; T] = 1
;; run_test "hamming_distance one different nucleotide" test

let test (): bool =
  hamming_distance [G; A; T; T; T; A; C; G] [G; A; T; T; T; A; C; G] = 0
;; run_test "hamming_distance same nucleotide" test

let test (): bool =
  not(hamming_distance [G; A; T; T; T; A; C; G] [G; A; A; T; T; A; C; G] = 0)
;; run_test "hamming_distance same nucleotide incorrect" test

let test (): bool =
  hamming_distance [G; A; T; T; T; A; C; G] [C; A; T; G; T; G; C; C] = 4
;; run_test "hamming_distance multiple different nucleotide" test

let test (): bool =
  hamming_distance [] [] = 0
;; run_test "hamming_distance empty nucleotide" test

let test (): bool =
  hamming_distance [A] [A] = 0
;; run_test "hamming_distance singleton match nucleotide" test

let test (): bool =
  hamming_distance [A] [C] = 1
;; run_test "hamming_distance singleton no match nucleotide" test

(************************ decreasing_similarity tests *************************)

(* Be sure to add your own test cases -- we will be grading the tests for this 
 * problem. *)

let test (): bool =
  (decreasing_similarity [])
;; run_test "decreasing_similarity empty lists" test

let test (): bool =
  (decreasing_similarity [chimpanzee; gorilla; orangutan; siamang; 
                          pileated_gibbon; white_cheeked_gibbon; lar_gibbon])
;; run_test "decreasing_similarity correct order" test

let test (): bool =
  (decreasing_similarity [chimpanzee])
;; run_test "decreasing_similarity singleton" test


let test (): bool =
  not(decreasing_similarity [gorilla; chimpanzee; siamang; orangutan;
                             white_cheeked_gibbon; pileated_gibbon; lar_gibbon])
;; run_test "decreasing_similarity incorrect order" test

let test (): bool =
  not(decreasing_similarity [chimpanzee; siamang; gorilla])
;; run_test "decreasing_similarity three apes" test

(**************************** acids_of_helix tests ****************************)

(* Here's an example test case.  Be sure to add your own--we will be grading the
 * tests for this problem.  Also be sure to fill in the incomplete test case
 * we provided. *)

let test () : bool =
  acids_of_helix [A; G; T; A; C] = [Met]
;; run_test "acids_of_helix single codon" test

let test () : bool =
  acids_of_helix [A; G; T; A; C; T; C; C] = [Met; Arg]
;; run_test "acids_of_helix two codons" test

let test () : bool =
  not(acids_of_helix [A; G; T; A; C; T; C; C] = [Met; Phe])
;; run_test "acids_of_helix two codons INCORRECT" test


let test () : bool =
  acids_of_helix [A; G] = []
;; run_test "acids_of_helix too short" test

let test () : bool =
  acids_of_helix [A; C; T; G; A] = []
;; run_test "acids_of_helix END at beginning" test

let test () : bool =
  acids_of_helix [T; A; C; T; C; C; G; C; A; A; C; T; G; G; A; C] = 
  [Met; Arg; Arg]
;; run_test "acids_of_helix END in the middle" test

let test () : bool =
  acids_of_helix [T; A; C; T; C; C; G; C; A; A; C; T] = [Met; Arg; Arg]
;; run_test "acids_of_helix END at end" test

let test () : bool =
  acids_of_helix [A; C; T; T; A; C; T; C; C; G; C; A] = [Met; Arg; Arg]
;; run_test "acids_of_helix END before start" test

let test () : bool =
  acids_of_helix [T; A; C] = [Met]
;; run_test "acids_of_helix just start" test


(***************************** count_leaves tests *****************************)

(* Here are two example tests cases. Both trees should contain exactly four
 * species. Don't forget to add your own test cases! *)

let test () : bool =
  count_leaves (greater_apes ()) = 4
;; run_test "count_leaves greater_apes" test

let test () : bool =
  count_leaves (lesser_apes ()) = 4
;; run_test "count_leaves lesser_apes" test

let test () : bool =
  not(count_leaves (lesser_apes ()) = 3)
;; run_test "count_leaves lesser_apes incorrect" test

let test () : bool =
  count_leaves (Leaf lar_gibbon) = 1
;; run_test "count_leaves singleton" test

let test () : bool =
  count_leaves (Node(Leaf lar_gibbon,  Leaf pileated_gibbon)) = 2
;; run_test "count_leaves two leaves" test

let test () : bool =
  count_leaves (Node
                  (Node(
                      Leaf lar_gibbon, 
                      Leaf chimpanzee),
                   Leaf pileated_gibbon)) = 3
;; run_test "count_leaves depth-3" test

let test () : bool =
  count_leaves (Leaf[]) = 1
;; run_test "count_leaves empty" test

(**************************** helix_of_tree tests *****************************)

(* Here's an example test case.  Be sure to add your own--we will be grading the
 * tests for this problem. *)

let test () : bool =
  helix_of_tree (LNode (LLeaf [T], [A], LLeaf [G])) = [A]
;; run_test "helix_of_tree lnode" test

let test () : bool =
  helix_of_tree (LLeaf [G]) = [G]
;; run_test "helix_of_tree lleaf" test

let test () : bool =
  helix_of_tree (LNode (LLeaf [T; G; G], [A; G; A], LLeaf [G; T; A])) = 
  [A; G; A]
;; run_test "helix_of_tree lnode complex helices" test

let test () : bool =
  helix_of_tree (LNode 
                   (LLeaf [T], 
                    [A; G], 
                    LNode(
                      LLeaf[G], 
                      [T], 
                      LLeaf[A]) )
                ) = [A; G]
;; run_test "helix_of_tree multiple lnodes" test

let test () : bool =
  helix_of_tree (LLeaf[]) = []
;; run_test "helix_of_tree empty" test
(**************************** unlabel_tree tests ******************************)

(* Here's an example test case.  Be sure to add your own--we will be grading the
 * tests for this problem. *)

let test () : bool =
  unlabel_tree (LNode (LLeaf [T], [A], LLeaf [G])) =
  Node (Leaf [T], Leaf [G])
;; run_test "unlabel_tree depth-2 tree" test

let test (): bool =
  unlabel_tree (LLeaf[]) = Leaf[]
;; run_test "unlabel_tree empty tree" test

let test (): bool =
  unlabel_tree (LNode (LNode(LLeaf[C], [T], LLeaf[T]  ), [A], 
                       LNode(LLeaf[A], [G], LLeaf[G] )) ) = 
  Node(Node(Leaf [C], Leaf[T]), Node(Leaf[A], Leaf[G]))
;; run_test "unlabel_tree depth-3 tree" test

let test (): bool =
  unlabel_tree (LNode (LNode(LLeaf[G], [T], LLeaf[T]  ), [A], 
                       LNode(LLeaf[A], [G], LLeaf[] )) ) = 
  Node(Node(Leaf [G], Leaf[T]), Node(Leaf[A], Leaf[]))
;; run_test "unlabel_tree uneven depth-3 tree" test



(************************* guess_parent_helix tests ***************************)

(* Here's an example test case.  Be sure to fill in the incomplete test case
 * we provided *)

let test () : bool =
  guess_parent_helix [T; C; A] [G; C; A] = [A; C; A]
;; run_test "guess_parent_helix one difference" test

let test () : bool =
  guess_parent_helix [A; C; G; G; T; A; C]
    [C; T; G; C; T; A; A] = [A; A; G; A; T; A; A]
;; run_test "guess_parent_helix multiple differences" test

let test () : bool =
  guess_parent_helix [T] [C] = [A]
;; run_test "guess_parent_helix singleton" test

let test () : bool =
  not(guess_parent_helix [T] [C] = [T])
;; run_test "guess_parent_helix singleton incorrect" test

let test () : bool =
  guess_parent_helix [] [] = []
;; run_test "guess_parent_helix empties" test

let test () : bool =
  guess_parent_helix [T; A; G] [T; A; G] = [T; A; G]
;; run_test "guess_parent_helix no differences" test


(************************ add_ancestor_labels tests ***************************)

(* Here's an example test case.  Be sure to fill in the incomplete test cases
 * we provided and don't forget to add your own test cases! *)

let test () : bool =
  add_ancestor_labels (Node (Leaf [T], Leaf [G])) =
  LNode (LLeaf [T], [A], LLeaf [G])
;; run_test "add_ancestor_labels depth-2 tree" test

let test () : bool =
  add_ancestor_labels (Node (Leaf [T; C], Leaf [T; C])) =
  LNode(LLeaf[T; C], [T; C], LLeaf[T; C])
;; run_test "add_ancestor_labels also depth-2 tree" test

let test () : bool =
  add_ancestor_labels (Leaf [T; C]) =
  LLeaf[T;C]
;; run_test "add_ancestor_labels leaf" test

let test () : bool =
  not(add_ancestor_labels (Leaf [T; C]) =
  LLeaf[T;G])
;; run_test "add_ancestor_labels leaf incorrect" test

let test () : bool =
  add_ancestor_labels (Node 
                         (Node
                            (Leaf [T], 
                             Leaf[T]), 
                          Leaf [G])
                      ) = 
  LNode
    (LNode
       (LLeaf[T], 
        [T], 
        LLeaf[T]),
     [A],
     LLeaf[G] 
    )
;; run_test "add_ancestor_labels depth-3 tree" test

let test () : bool =
  add_ancestor_labels (Leaf[]) = LLeaf[]
;; run_test "add_ancestor_labels empty" test
(************************ parent_child_hamming tests **************************)

(* Here we give you one example test.  Add your own tests--we will grade the
 * test cases for this problem.  Be sure to test for trees of greater depth. *)

let test () : bool =
  parent_child_hamming (LNode (LLeaf [T], [A], LLeaf [G])) = 2
;; run_test "parent_child_hamming depth-2 tree, all different" test

let test () : bool =
  parent_child_hamming (LLeaf [T]) = 0
;; run_test "parent_child_hamming leaf" test

let test () : bool =
  parent_child_hamming (LLeaf []) = 0
;; run_test "parent_child_hamming empty" test

let test () : bool =
  parent_child_hamming (LNode
                          (LNode
                             (LLeaf[T], 
                              [T], 
                              LLeaf[T]),
                           [A],
                           LLeaf[G] 
                          )) = 2
;; run_test "parent_child_hamming depth-3 tree, some same, some different" test

let test () : bool =
  parent_child_hamming (LNode (LLeaf [T], [T], LLeaf [T])) = 0
;; run_test "parent_child_hamming depth-2 tree, all same" test

let test () : bool =
  not(parent_child_hamming (LNode (LLeaf [T], [T], LLeaf [T])) = 1)
;; run_test "parent_child_hamming depth-2 tree, all same incorrect" test
(**************************** simplest_tree tests *****************************)

(* Here are two example test cases. Don't forget to add your own test cases!
 *
 * Note: If you want to write a test that fails on purpose, then you can use
 * run_failing_test. run_failing_test will fail if the function returns true or 
 * false, and will pass if the function throws an error *)

let test () : bool =
  simplest_tree [] = (LLeaf [], 0)
;; run_failing_test "simplest_tree empty" test

let test () : bool =
let t5 = LLeaf [A] in
let t6 = LLeaf [T] in
  simplest_tree [t5; t6] = (t6, 0)
;; run_test "simplest_tree singletons" test

let test () : bool =
  let t1 = LNode (LLeaf [A], [T], LLeaf [C]) in
  let t2 = LNode (
      LLeaf [G; T],
      [A; T],
      LNode (
        LLeaf [T; T], 
        [T; T], 
        LLeaf [C; G]
      )
    ) in
  simplest_tree [t1; t2] = (t1, 2)
;; run_test "simplest_tree two tree list" test

let test () : bool =
  let t1 = LNode (LLeaf [A], [T], LLeaf [C]) in
  let t2 = LNode (
      LLeaf [G; T],
      [A; T],
      LNode (
        LLeaf [T; T], 
        [T; T], 
        LLeaf [C; G]
      )
    ) in
  not(simplest_tree [t1; t2] = (t2, 2))
;; run_test "simplest_tree two tree list incorrect" test

let test () : bool =
  let t1 = LNode (LLeaf [G], [T], LLeaf [A]) in
  let t2 = LLeaf [] in
  simplest_tree [t1; t2] = (t2, 0)
;; run_test "simplest_tree one full one empty" test

let test () : bool =
  let t1 = LNode (LLeaf [A], [T], LLeaf [C]) in
  let t2 = LNode (LLeaf [A], [T], LLeaf [C]) in
  simplest_tree [t1; t2] = (t2, 2)
;; run_test "simplest_tree same tree" test


let test () : bool =
  let t1 = LNode (LLeaf [A], [T], LLeaf [C]) in
  let t2 = LNode (
      LLeaf [G; T],
      [A; T],
      LNode (
        LLeaf [T; T], 
        [T; T], 
        LLeaf [C; G]
      )
    ) in

  let t3 = LNode
      (LNode
         (LLeaf[T], 
          [T], 
          LLeaf[T]),
       [T],
       LLeaf[G] 
      ) in
  simplest_tree [t1; t2; t3] = (t3, 1)
;; run_test "simplest_tree three tree list" test
(********************* simplest_greater_ape_tree tests ************************)


let test () : bool =
  find_simplest_tree gorilla human chimpanzee orangutan =
  simplest_greater_ape_tree ()
;; run_test "simplest_greater_ape_tree" test

let test () : bool =
  find_simplest_tree lar_gibbon pileated_gibbon siamang white_cheeked_gibbon =
  simplest_lesser_ape_tree ()
;; run_test "simplest_lesser_ape_tree" test

;; print_endline "dnaTest.ml: ran to completion."
